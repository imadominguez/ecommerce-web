datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  user
  admin
}

enum Color {
  cyan
  // red
  yellow
  black
  magenta
}

enum StatusOrder {
  pending
  delivered
  canceled
}

model Category {
  id      String    @id @default(uuid())
  name    String    @unique
  Product Product[]

  // Fechas
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id                String   @id @default(uuid())
  title             String
  description       String
  fullDescription   String
  price             Float
  color             Color?
  inStock           Int      @default(0)
  slug              String   @unique
  tags              String[] @default([])
  images            String[]
  inDiscount        Boolean  @default(false)
  discount          Int?
  isActive          Boolean  @default(true)
  isFeatured        Boolean  @default(false)
  isAvailableOnline Boolean  @default(true) // Nueva propiedad para ventas online

  // Relaciones
  brand      Brand     @relation(fields: [brandId], references: [id])
  brandId    String
  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String

  ProductImage ProductImage[]
  OrderItem    OrderItem[]
  Comment      Comment[]

  // Fechas
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Favorite  Favorite[]
}

model ProductImage {
  id  String @id @default(uuid())
  url String

  // Relaciones
  product   Product @relation(fields: [productId], references: [id])
  productId String

  // Fechas
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          Role      @default(user)
  accounts      Account[]

  Address UserAddress?

  // Relaciones
  Order   Order[]
  Comment Comment[]

  // Fechas
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Favorite  Favorite[]
}

model Country {
  id           String         @id
  name         String
  Address      UserAddress[]
  OrderAddress OrderAddress[]
}

model UserAddress {
  id           String  @id @default(uuid())
  firstName    String
  lastName     String
  street       String // Calle, ej. 'Republica del Libano'
  streetNumber String // Número de la calle, ej. '4142'
  address2     String? // Opcional, para detalles adicionales
  isApartment  Boolean
  floor        String? // Opcional
  apartment    String? // Opcional
  postalCode   String
  phone        String
  city         String

  // Información fiscal
  taxType      String // 'Consumidor Final' o 'Responsable Inscripto'
  cuitCuil     String? // Solo si es Responsable Inscripto
  businessName String? // Razón social, solo si aplica
  vatCondition String? // 'Responsable Inscripto', 'Monotributista', 'Exento', solo si aplica

  // Relaciones
  country   Country @relation(fields: [countryId], references: [id])
  countryId String

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  // Fechas
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Orden de compras

model Order {
  id           String        @id @default(uuid())
  subTotal     Float
  envio        Float
  total        Float
  itemsInOrder Int
  isPaid       Boolean       @default(false)
  status       StatusOrder   @default(pending)
  paidAt       DateTime?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  // Relaciones
  user         User          @relation(fields: [userId], references: [id])
  userId       String
  OrderItem    OrderItem[]
  OrderAddress OrderAddress?

  transactionId String?
}

model OrderItem {
  id        String  @id @default(uuid())
  quantity  Int
  price     Float
  // Relaciones
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model OrderAddress {
  id           String  @id @default(uuid())
  firstName    String
  lastName     String
  street       String // Calle, ej. 'Republica del Libano'
  streetNumber String // Número de la calle, ej. '4142'
  address2     String? // Opcional, para detalles adicionales
  isApartment  Boolean
  floor        String? // Opcional
  apartment    String? // Opcional
  postalCode   String
  phone        String
  city         String
  // Relaciones
  country      Country @relation(fields: [countryId], references: [id])
  countryId    String
  Order        Order   @relation(fields: [orderId], references: [id])
  orderId      String  @unique
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())

  // Relaciones
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Brand {
  id      String    @id @default(uuid())
  name    String
  product Product[]
}

// Productos favoritos

model Favorite {
  id        String @id @default(uuid())
  userId    String
  productId String

  // Relaciones
  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  //  Fechas
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
}

model ShippingPrice {
  id          String @id @default(uuid())
  olavarria   Int    @default(0)
  otherCities Int    @default(0)
}

generator dbml {
  provider = "prisma-dbml-generator"
}
